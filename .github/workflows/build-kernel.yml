name: Build Kernel
on:
  push:

  workflow_dispatch:
    inputs:
       KERNEL_DEFCONFIG:
         description: 'Defconfig'
         required: true
         default: 'vendor/cezanne_user_defconfig'
       KERNEL_FILE:
         description: 'Your kernel out image name'
         required: true
         default: 'Image.gz-dtb'
       BUILD_EXTRA_COMMAND:
         description: 'Extra build commands(e.g. LLVM=1 LLVM_IAS=1)'
         required: false
         default: ''
       USE_KERNELSU:
         description: 'Use KernelSU'
         required: true
         default: 'true'
         type: boolean
       KERNELSU_TAG:
         description: 'KernelSU Tag'
         required: true
         default: 'v0.9.5'
       USE_ReKernel:
         description: 'Built-in Re:Kernel'
         required: true
         default: 'true'
         type: boolean
       MAKE_BOOT_IMAGE:
         description: 'Make boot image'
         required: false
         default: 'true'
         type: boolean
       SOURCE_BOOT_IMAGE:
         description: 'Your original boot image url'
         required: false
         default: 'https://raw.githubusercontent.com/xiaomi-mt6885-devs/android_kernel_xiaomi_mt6885/cgroup-v2/.github/boot.img'

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - uses: actions/checkout@v3
    - name: Setup Configuration
      run: |
        if [ $(cat .github/config.env | grep "USE_CONFIG" | head -n 1 | cut -d "=" -f 2) = true -o -z ${{ github.event.inputs.KERNEL_DEFCONFIG }} ];then
            echo "KERNEL_DEFCONFIG=$(cat .github/config.env | grep -w "KERNEL_DEFCONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNEL_FILE=$(cat .github/config.env | grep -w "KERNEL_FILE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "BUILD_EXTRA_COMMAND=$(cat .github/config.env | grep -w "EXTRA_BUILD_COMMAND" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            echo "USE_KERNELSU=$(cat .github/config.env | grep -w "USE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "USE_ReKernel=$(cat .github/config.env | grep -w "USE_ReKernel" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "KERNELSU_TAG=$(cat .github/config.env | grep -w "KERNELSU_TAG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "MAKE_BOOT_IMAGE=$(cat .github/config.env | grep -w "MAKE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            echo "SOURCE_BOOT_IMAGE=$(cat .github/config.env | grep -w "SOURCE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        else
            echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
            echo "KERNEL_FILE=${{ github.event.inputs.KERNEL_FILE }}" >> $GITHUB_ENV
            echo "BUILD_EXTRA_COMMAND=${{ github.event.inputs.BUILD_EXTRA_COMMAND }}" >> $GITHUB_ENV
            echo "USE_KERNELSU=${{ github.event.inputs.USE_KERNELSU }}" >> $GITHUB_ENV
            echo "USE_ReKernel=${{ github.event.inputs.USE_KERNELSU }}" >> $GITHUB_ENV
            echo "KERNELSU_TAG=${{ github.event.inputs.KERNELSU_TAG }}" >> $GITHUB_ENV
            echo "MAKE_BOOT_IMAGE=${{ github.event.inputs.MAKE_BOOT_IMAGE }}" >> $GITHUB_ENV
            echo "SOURCE_BOOT_IMAGE=${{ github.event.inputs.SOURCE_BOOT_IMAGE }}" >> $GITHUB_ENV
        fi

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3 openjdk-19-jdk openjdk-19-jre

    - name: nload clang-3
      run: |
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r487747c.tar.gz
        tar -C clang-aosp/ -zxvf clang-r487747c.tar.gz
        mkdir gcc-aosp
        curl -o gcc-aosp.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
        tar -C gcc-aosp/ -zxvf gcc-aosp.tar.gz
        mkdir gcc32-aosp
        curl -o gcc32-aosp.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
        tar -C gcc32-aosp/ -zxvf gcc32-aosp.tar.gz

    - name: Download mkbootimg tools
      if: env.MAKE_BOOT_IMAGE == 'true'
      run: |
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg -b master-kernel-build-2022 --depth=1

    - name: Download source boot image
      if: env.MAKE_BOOT_IMAGE == 'true'
      run: |
        wget -O boot-source.img ${{ env.SOURCE_BOOT_IMAGE }}
        echo "FORMAT_MKBOOTING=$(echo `mkbootimg/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
        rm -rf out

    - name: Setup KernelSU
      if: env.USE_KERNELSU == 'true'
      run: |
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}
        echo "UPLOADNAME=-KernelSU" >> $GITHUB_ENV

    - name: Setup Re:Kernel
      if: env.USE_ReKernel == 'true'
      run: |
        wget --no-check-certificate https://github.com/Sakion-Team/Re-Kernel/releases/download/modifier/Kernel-Modifier-v4.0.jar
        "/usr/lib/jvm/java-19-openjdk-amd64/bin/java" -jar "Kernel-Modifier-v4.0.jar"

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: mtk-kernel-${{ env.DEVICE }}${{ env.UPLOADNAME }}
        max-size: 2G

    - name: Build kernel
      run: |
        export PATH=$GITHUB_WORKSPACE/clang-aosp/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        make -j$(nproc --all) O=out ARCH=arm64 CC="ccache clang" LD=ld.lld CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-aosp/bin/aarch64-linux-android- CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/gcc32-aosp/bin/arm-linux-androidkernel- ${{ env.BUILD_EXTRA_COMMAND }} ${{ env.KERNEL_DEFCONFIG }}
        make -j$(nproc --all) O=out ARCH=arm64 CC="ccache clang" LD=ld.lld CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=$GITHUB_WORKSPACE/gcc-aosp/bin/aarch64-linux-android- CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/gcc32-aosp/bin/arm-linux-androidkernel- ${{ env.BUILD_EXTRA_COMMAND }}

    - name: Check a kernel output files
      run: |
       if [ -f out/arch/arm64/boot/${{ env.KERNEL_FILE }} ]; then
           echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
       else
           echo "Kernel output file is empty"
           exit 1
       fi
  
    - name: Make Anykernel3
      if: env.CHECK_FILE_IS_OK == 'true'
      run: |
        git clone https://github.com/osm0sis/AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        cp out/arch/arm64/boot/${{ env.KERNEL_FILE }} AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md

    - name: Make boot image
      if: env.MAKE_BOOT_IMAGE == 'true' && env.CHECK_FILE_IS_OK == 'true'
      run: |
        rm -rf out
        mkbootimg/unpack_bootimg.py --boot_img boot-source.img
        cp AnyKernel3/${{ env.KERNEL_FILE }} out/kernel
        mkbootimg/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
        if [ -f boot.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "Boot image is empty"
            exit 1
        fi

    - name: Upload AnyKernel3
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: AnyKernel3${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: AnyKernel3/*

    - name: Upload boot image
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: boot${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: boot.img

    - name: Delete old workflow
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 3
